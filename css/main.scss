@import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro:ital,wght@0,200;0,400;1,300&display=swap');
html {
  font-family: 'Lato', sans-serif;
  font-size: var(--size-text);
  word-spacing: 1px;
  text-rendering: optimizeLegibility;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  -webkit-tap-highlight-color: transparent;
  box-sizing: border-box;
  scroll-behavior: smooth;
}

body {
  background-color: var(--primary);
  color: var(--secondary);
}

*,
*:before,
*:after {
  box-sizing: border-box;
  margin: 0;
}

:root {
  --primary: #000000;
  --secondary: #ffffff;
  --default: #d63c4b;
  --title:  'Source Code Pro', monospace;
  --paragraph: 'Lato', sans-serif;
  --size-text: 1rem;
  // breakpoints
  --medium: 768px;
  --large: 992px;
  --xlarge: 1200px;
}


::selection {
  color: white;
  background: var(--default); /* WebKit/Blink Browsers */
}
::-moz-selection {
  color: white;
  background: var(--default); /* Gecko Browsers */
}

hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}

a {
  text-decoration: none;
  color: var(--color-link);
  position: relative;
  display: block;
  overflow: hidden;
  padding-bottom: 4px;
  background-color: transparent;
}

img {
  border-style: none;
  width: 100%;
}

h1 {
  font-size: 3.5rem;
  font-weight: 700;
}

h2 {
  font-size: 3rem;
  font-family: 'Source Code Pro', monospace;
  font-weight: 300;
  text-align: center;
}
h3 {
  font-size: 2.5rem;
}
h4 {
  font-size: 2rem;
}
h5 {
  color: var(--default);
  font-size: 1.5rem;
}
h6 {
  font-size: 1rem;
}
h1,
h3,
h4,
h5,
h6 {
  font-family: var(--title);
}

b,
strong {
  font-weight: bolder;
}

small {
  font-size: 80%;
}
p {
  font-family: 'Source Code Pro', monospace;
  font-weight: 300;
  text-align: center;
}
button,
label,
input,
optgroup,
select,
textarea {
  display: inline-flex;
  font-family: 'Open sans', sans-serif;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}
button,
input {
  overflow: visible;
}
button,
select {
  text-transform: none;
}
button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: none;
}
button::-moz-focus-inner,
[type='button']::-moz-focus-inner,
[type='reset']::-moz-focus-inner,
[type='submit']::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
button:-moz-focusring,
[type='button']:-moz-focusring,
[type='reset']:-moz-focusring,
[type='submit']:-moz-focusring {
  outline: 2px solid #bc6c25;
}
label {
  color: rgba(0, 0, 0, 0.5);
  font-weight: 700;
}
input,
textarea {
  box-sizing: border-box;
  border: solid 1px rgba(0, 0, 0, 0.4);
}
textarea {
  width: 100%;
  overflow: auto;
  font-size: 20px;
}
[type='checkbox'],
[type='radio'] {
  box-sizing: border-box;
  padding: 0;
}
[type='number']::-webkit-inner-spin-button,
[type='number']::-webkit-outer-spin-button {
  height: auto;
}
[type='search'] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}
[type='search']::-webkit-search-decoration {
  -webkit-appearance: none;
}
[type='text'],
[type='number'],
[type='search'],
[type='password'] {
  height: 52px;
  width: 100%;
  padding: 0 10px;
  font-size: 20px;
}
[type='text']:focus,
[type='number']:focus,
[type='search']:focus,
[type='password']:focus {
  border-color: #39b982;
}
::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

[hidden] {
  display: none;
}

select:focus {
  border-color: #39b982;
  outline: 0;
}
select:focus::ms-value {
  color: #000;
  background: #fff;
}
select::ms-expand {
  opacity: 0;
}
.form-field {
  margin-bottom: 25px;
}

.btn {
  border: none;
  background-color: transparent;
}

ul.menu__links {
  padding: 0;
  margin: 0;
  list-style: none;
  display: flex;
  flex-direction: column;
  @media (min-width: 768px) {
    flex-direction: row;
  }
  li.menu__item {
    padding: 5px 10px;
    margin: 0 15px;
    cursor: pointer;
    position: relative;
    &:before {
      content: '';
      width: 100%;
      height: 2px;
      background-color: var(--default);
      position: absolute;
      bottom: 0;
      left: 0;
      transform: translateY(-20px);
      opacity: 0;
      transition: all 0.5s ease-in-out;
    }
    &:hover {
      &:before {
        transition: all 0.5s ease-in-out;
        opacity: 0.75;
        transform: translateY(0);
      }
    }
    span {
      font-size: 1rem;
      letter-spacing: 2px;
      font-family: 'Source Code Pro', monospace;
      font-weight: bold;
    }
  }
}

.rounded {
  width: 250px;
  height: 250px;
  background-color: var(--secondary);
  border-radius: 50%;
  opacity: 0.2;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.circle-container {
  $particleNum: 10;
  $particleColor: hsl(180, 100%, 80%);

  position: absolute;
  transform: translateY(10vh);
  animation-iteration-count: infinite;
  animation-timing-function: linear;

  .circle {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    mix-blend-mode: screen;
    background-image: radial-gradient(
      hsl(180, 100%, 80%),
      hsl(180, 100%, 80%) 10%,
      hsla(180, 100%, 80%, 0) 56%
    );

    animation: fadein-frames 200ms infinite, scale-frames 2s infinite;

    @keyframes fade-frames {
      0% {
        opacity: 1;
      }

      50% {
        opacity: 0.7;
      }

      100% {
        opacity: 1;
      }
    }

    @keyframes scale-frames {
      0% {
        transform: scale3d(0.4, 0.4, 1);
      }

      50% {
        transform: scale3d(2.2, 2.2, 1);
      }

      100% {
        transform: scale3d(0.4, 0.4, 1);
      }
    }
  }

  $particleBaseSize: 8;

  @for $i from 1 through $particleNum {
    &:nth-child(#{$i}) {
      $circleSize: random($particleBaseSize);
      width: $circleSize + px;
      height: $circleSize + px;

      $startPositionY: random(10) + 100;
      $framesName: 'move-frames-' + $i;
      $moveDuration: 28000 + random(9000) + ms;

      animation-name: #{$framesName};
      animation-duration: $moveDuration;
      animation-delay: random(37000) + ms;

      @keyframes #{$framesName} {
        from {
          transform: translate3d(
            #{random(100) + vw},
            #{$startPositionY + vh},
            0
          );
        }

        to {
          transform: translate3d(
            #{random(100) + vw},
            #{- $startPositionY - random(30) + vh},
            0
          );
        }
      }

      .circle {
        animation-delay: random(4000) + ms;
      }
    }
  }
}
